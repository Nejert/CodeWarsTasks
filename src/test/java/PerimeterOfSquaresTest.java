import static org.junit.Assert.*;

import java.math.BigInteger;

import org.junit.Test;

public class PerimeterOfSquaresTest {

    @Test
    public void test1() {
        assertEquals(BigInteger.valueOf(80), PerimeterOfSquares.perimeter(BigInteger.valueOf(5)));
    }

    @Test
    public void test2() {
        assertEquals(BigInteger.valueOf(216), PerimeterOfSquares.perimeter(BigInteger.valueOf(7)));
    }

    @Test
    public void test3() {
        assertEquals(BigInteger.valueOf(14098308), PerimeterOfSquares.perimeter(BigInteger.valueOf(30)));
    }

    @Test
    public void test4() {
        assertEquals(new BigInteger("1901936374531322611695656486266570905016569880009845527221797785930211839372025150393483187666893597145409792734603883676988412241218086021033459604226362550574204756369058050928156613610640644955716386320600483749615926462292002978100687191302113209169681556754519704161032704391535203788749505176897160696117577067126551175480228589031393262008754329529389240047014705822605924030498722321081926353707737930367040893635660518155058269294178655745964930439896289854247564554631154821935004178268238747678718689178256992114009967799692384301030748247500752542809375907298000261403438210817607703283766910441532266426512533097017220591142687367618064096860362548366923253954568593947603788128605066835016498266040767004582206277115401113788300588242916717611755624887799116586118872612784989175054180613640900651321671482828025958471884143486171129363482162553342531754015301072959238593656629576495781723659694873981347221728311576341991008751422431311854918906455127187129849294462734427963141671573616238420769027370370870048946755288556311703040527629467614828253398126884959422387019584695268117581526809807952630039466499227506119883006559403184841004030288597036844923634187427789284592351873734667586738746323679160518161858871250519346764870340800888229562758173946331469471433770065784340041960745661428379647615826170449206395625556343562600106361578042146549996746176312760327692520033817010521015031190221658441349212911036923601136399541947257393626102614047877867626685114915857640019109238884831177574025701662289276677374372828287429284774691850721259624266770608282293233279855921854172202304552941014921955418147820359401543142698457238863485261630731179184274073247728360756379910260034903693041693839588320378082585422900914140736655189447074866360806263341775165911229033108806137740865344318703030273632207898212824618786191324058357413251622576030432816243437115773597479782945654832473056813099178821938063069368951423699090001596816704062036366706401015618246351739365329530755116822017356777555613384816986334612713123929841175149338947316933294524322109223582579612263073972242929122453269297206552654077371177520580631799268898128892026592298193151471001740417781152032954087858278999660024549759512026349082780766507620291306848990453833131102228241724340705108479416215503096805678591137505171910763595184265181018600756485598505204288159420543806482292410366913435675264101409061086305023440273803829838878729813460647584990887193688876258243496898743606604110249884956520648176851632090094534351815526996414903333765456061846336775462901566144524269818138805018036716126084046444944620660495276092369554831570364385207285476267065118205199530836847501740462687550290084866985970576409950205239349554179061485978766451304399428770373100900272332543200481049211123095655357600732171966009106674683596361191358449776510385575017302678723560253121000342732045725248333087670865030824313556492883929646963684248283059322550488384538900960081341623313894435645307502783466667367403410769805797150138776747053336699142745879971904713739866499937523427472857486674113433062543969801996964228702643263834337787547036420811604177235919306511914463799867237709636269043738704479705919366298102804349500372469772250169599618346370715136333945796430718803353127524066377609008253217854708463659763197071875225052470987555067704498217980810094929554371394003825746237898283252825925452639094926080634097156371632628127785734228542031784581103154916209166804389475350643744810010864740817953195580427774621900801464704069766748583091415017599550487111988611984000132478225443747854274180883863350376335456594655254239780751556489444143013973230524726169916183940052909732573513395136699588129580576077867014574044213465806947689652888884565624231119558633030203921684991850247656019773248780531235843958796813009943796978258198281916745981276544482519977887817204987261962308687740640512669451781093427402377794104501520605419537823723728084350324408524539674348036090822076848264438675243976865414815715129049228859004472691217906437042319201497302144830321969261424245527708718405467617464698323445624756631174949179435848621885485553498678776679786278671567457629009186637946903890398260274158405141232641928953391890146389619707316776392361107877732806981824177265639607621561967304786568840570919780492762637550824086464520182872376671092589384056736662043917520242901180494940940289081971978420564493244047018978931993252760377350330281734394268759211832553430666406205426950707146950698888626898200433282112854555327461400860529521902737843567768691833971521901539659611799971337897380419473271112914972631635817941015817197332200356805651188378956080034472773159952388851845854885986694575425188342863635322590012778170474721789228664184839140942797657784411799261112764634252819189408892365904000813419633410175095954551757485147652358954897003385987119295828848149887351617175689461794986768452880306641149464512690215412131194288469857483093861490649137699636068012920453483726933760362131222278672469148230419663537179708737231359277481924283883580804"), PerimeterOfSquares.perimeter(BigInteger.valueOf(24300)));
    }
}
